// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AddressLockFNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("minter", Value.fromString(""));
    this.set("trigger", Value.fromString(""));
    this.set("asset", Value.fromString(""));
    this.set("pipeToContract", Value.fromString(""));
    this.set("depositAmount", Value.fromBigInt(BigInt.zero()));
    this.set("depositMul", Value.fromBigInt(BigInt.zero()));
    this.set("split", Value.fromBigInt(BigInt.zero()));
    this.set("depositStopTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddressLockFNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AddressLockFNFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AddressLockFNFT", id.toString(), this);
    }
  }

  static load(id: string): AddressLockFNFT | null {
    return changetype<AddressLockFNFT | null>(store.get("AddressLockFNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): string {
    let value = this.get("minter");
    return value!.toString();
  }

  set minter(value: string) {
    this.set("minter", Value.fromString(value));
  }

  get trigger(): string {
    let value = this.get("trigger");
    return value!.toString();
  }

  set trigger(value: string) {
    this.set("trigger", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get pipeToContract(): string {
    let value = this.get("pipeToContract");
    return value!.toString();
  }

  set pipeToContract(value: string) {
    this.set("pipeToContract", Value.fromString(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }

  get depositMul(): BigInt {
    let value = this.get("depositMul");
    return value!.toBigInt();
  }

  set depositMul(value: BigInt) {
    this.set("depositMul", Value.fromBigInt(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get depositStopTime(): BigInt {
    let value = this.get("depositStopTime");
    return value!.toBigInt();
  }

  set depositStopTime(value: BigInt) {
    this.set("depositStopTime", Value.fromBigInt(value));
  }

  get maturityExtension(): boolean {
    let value = this.get("maturityExtension");
    return value!.toBoolean();
  }

  set maturityExtension(value: boolean) {
    this.set("maturityExtension", Value.fromBoolean(value));
  }

  get isMulti(): boolean {
    let value = this.get("isMulti");
    return value!.toBoolean();
  }

  set isMulti(value: boolean) {
    this.set("isMulti", Value.fromBoolean(value));
  }

  get nontransferrable(): boolean {
    let value = this.get("nontransferrable");
    return value!.toBoolean();
  }

  set nontransferrable(value: boolean) {
    this.set("nontransferrable", Value.fromBoolean(value));
  }
}
