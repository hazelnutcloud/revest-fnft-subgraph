// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FNFTAddionalDeposited extends ethereum.Event {
  get params(): FNFTAddionalDeposited__Params {
    return new FNFTAddionalDeposited__Params(this);
  }
}

export class FNFTAddionalDeposited__Params {
  _event: FNFTAddionalDeposited;

  constructor(event: FNFTAddionalDeposited) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFNFTId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FNFTAddressLockMinted extends ethereum.Event {
  get params(): FNFTAddressLockMinted__Params {
    return new FNFTAddressLockMinted__Params(this);
  }
}

export class FNFTAddressLockMinted__Params {
  _event: FNFTAddressLockMinted;

  constructor(event: FNFTAddressLockMinted) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fnftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get trigger(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get quantities(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get fnftConfig(): FNFTAddressLockMintedFnftConfigStruct {
    return changetype<FNFTAddressLockMintedFnftConfigStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }
}

export class FNFTAddressLockMintedFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class FNFTMaturityExtended extends ethereum.Event {
  get params(): FNFTMaturityExtended__Params {
    return new FNFTMaturityExtended__Params(this);
  }
}

export class FNFTMaturityExtended__Params {
  _event: FNFTMaturityExtended;

  constructor(event: FNFTMaturityExtended) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fnftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newExtendedTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FNFTSplit extends ethereum.Event {
  get params(): FNFTSplit__Params {
    return new FNFTSplit__Params(this);
  }
}

export class FNFTSplit__Params {
  _event: FNFTSplit;

  constructor(event: FNFTSplit) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFNFTId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get proportions(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get quantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FNFTTimeLockMinted extends ethereum.Event {
  get params(): FNFTTimeLockMinted__Params {
    return new FNFTTimeLockMinted__Params(this);
  }
}

export class FNFTTimeLockMinted__Params {
  _event: FNFTTimeLockMinted;

  constructor(event: FNFTTimeLockMinted) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fnftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get quantities(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get fnftConfig(): FNFTTimeLockMintedFnftConfigStruct {
    return changetype<FNFTTimeLockMintedFnftConfigStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }
}

export class FNFTTimeLockMintedFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class FNFTUnlocked extends ethereum.Event {
  get params(): FNFTUnlocked__Params {
    return new FNFTUnlocked__Params(this);
  }
}

export class FNFTUnlocked__Params {
  _event: FNFTUnlocked;

  constructor(event: FNFTUnlocked) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fnftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FNFTValueLockMinted extends ethereum.Event {
  get params(): FNFTValueLockMinted__Params {
    return new FNFTValueLockMinted__Params(this);
  }
}

export class FNFTValueLockMinted__Params {
  _event: FNFTValueLockMinted;

  constructor(event: FNFTValueLockMinted) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fnftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get compareTo(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get oracleDispatch(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get quantities(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get fnftConfig(): FNFTValueLockMintedFnftConfigStruct {
    return changetype<FNFTValueLockMintedFnftConfigStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class FNFTValueLockMintedFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class FNFTWithdrawn extends ethereum.Event {
  get params(): FNFTWithdrawn__Params {
    return new FNFTWithdrawn__Params(this);
  }
}

export class FNFTWithdrawn__Params {
  _event: FNFTWithdrawn;

  constructor(event: FNFTWithdrawn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fnftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Revest extends ethereum.SmartContract {
  static bind(address: Address): Revest {
    return new Revest("Revest", address);
  }

  ADDRESS_LOCK_INTERFACE_ID(): Bytes {
    let result = super.call(
      "ADDRESS_LOCK_INTERFACE_ID",
      "ADDRESS_LOCK_INTERFACE_ID():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_ADDRESS_LOCK_INTERFACE_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ADDRESS_LOCK_INTERFACE_ID",
      "ADDRESS_LOCK_INTERFACE_ID():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OUTPUT_RECEIVER_INTERFACE_V2_ID(): Bytes {
    let result = super.call(
      "OUTPUT_RECEIVER_INTERFACE_V2_ID",
      "OUTPUT_RECEIVER_INTERFACE_V2_ID():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_OUTPUT_RECEIVER_INTERFACE_V2_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "OUTPUT_RECEIVER_INTERFACE_V2_ID",
      "OUTPUT_RECEIVER_INTERFACE_V2_ID():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  depositAdditionalToFNFT(
    fnftId: BigInt,
    amount: BigInt,
    quantity: BigInt
  ): BigInt {
    let result = super.call(
      "depositAdditionalToFNFT",
      "depositAdditionalToFNFT(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fnftId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(quantity)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositAdditionalToFNFT(
    fnftId: BigInt,
    amount: BigInt,
    quantity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositAdditionalToFNFT",
      "depositAdditionalToFNFT(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fnftId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(quantity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Fee(): BigInt {
    let result = super.call("erc20Fee", "erc20Fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_erc20Fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("erc20Fee", "erc20Fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extendFNFTMaturity(fnftId: BigInt, endTime: BigInt): BigInt {
    let result = super.call(
      "extendFNFTMaturity",
      "extendFNFTMaturity(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fnftId),
        ethereum.Value.fromUnsignedBigInt(endTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_extendFNFTMaturity(
    fnftId: BigInt,
    endTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extendFNFTMaturity",
      "extendFNFTMaturity(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fnftId),
        ethereum.Value.fromUnsignedBigInt(endTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flatWeiFee(): BigInt {
    let result = super.call("flatWeiFee", "flatWeiFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_flatWeiFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("flatWeiFee", "flatWeiFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAddressesProvider(): Address {
    let result = super.call(
      "getAddressesProvider",
      "getAddressesProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getAddressesProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddressesProvider",
      "getAddressesProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getERC20Fee(): BigInt {
    let result = super.call("getERC20Fee", "getERC20Fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getERC20Fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getERC20Fee", "getERC20Fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFlatWeiFee(): BigInt {
    let result = super.call("getFlatWeiFee", "getFlatWeiFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFlatWeiFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFlatWeiFee",
      "getFlatWeiFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  splitFNFT(
    fnftId: BigInt,
    proportions: Array<BigInt>,
    quantity: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "splitFNFT",
      "splitFNFT(uint256,uint256[],uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(fnftId),
        ethereum.Value.fromUnsignedBigIntArray(proportions),
        ethereum.Value.fromUnsignedBigInt(quantity)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_splitFNFT(
    fnftId: BigInt,
    proportions: Array<BigInt>,
    quantity: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "splitFNFT",
      "splitFNFT(uint256,uint256[],uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(fnftId),
        ethereum.Value.fromUnsignedBigIntArray(proportions),
        ethereum.Value.fromUnsignedBigInt(quantity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelisted(param0: Address): boolean {
    let result = super.call("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositAdditionalToFNFTCall extends ethereum.Call {
  get inputs(): DepositAdditionalToFNFTCall__Inputs {
    return new DepositAdditionalToFNFTCall__Inputs(this);
  }

  get outputs(): DepositAdditionalToFNFTCall__Outputs {
    return new DepositAdditionalToFNFTCall__Outputs(this);
  }
}

export class DepositAdditionalToFNFTCall__Inputs {
  _call: DepositAdditionalToFNFTCall;

  constructor(call: DepositAdditionalToFNFTCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositAdditionalToFNFTCall__Outputs {
  _call: DepositAdditionalToFNFTCall;

  constructor(call: DepositAdditionalToFNFTCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExtendFNFTMaturityCall extends ethereum.Call {
  get inputs(): ExtendFNFTMaturityCall__Inputs {
    return new ExtendFNFTMaturityCall__Inputs(this);
  }

  get outputs(): ExtendFNFTMaturityCall__Outputs {
    return new ExtendFNFTMaturityCall__Outputs(this);
  }
}

export class ExtendFNFTMaturityCall__Inputs {
  _call: ExtendFNFTMaturityCall;

  constructor(call: ExtendFNFTMaturityCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExtendFNFTMaturityCall__Outputs {
  _call: ExtendFNFTMaturityCall;

  constructor(call: ExtendFNFTMaturityCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintAddressLockCall extends ethereum.Call {
  get inputs(): MintAddressLockCall__Inputs {
    return new MintAddressLockCall__Inputs(this);
  }

  get outputs(): MintAddressLockCall__Outputs {
    return new MintAddressLockCall__Outputs(this);
  }
}

export class MintAddressLockCall__Inputs {
  _call: MintAddressLockCall;

  constructor(call: MintAddressLockCall) {
    this._call = call;
  }

  get trigger(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get arguments(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get quantities(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get fnftConfig(): MintAddressLockCallFnftConfigStruct {
    return changetype<MintAddressLockCallFnftConfigStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class MintAddressLockCall__Outputs {
  _call: MintAddressLockCall;

  constructor(call: MintAddressLockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintAddressLockCallFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class MintTimeLockCall extends ethereum.Call {
  get inputs(): MintTimeLockCall__Inputs {
    return new MintTimeLockCall__Inputs(this);
  }

  get outputs(): MintTimeLockCall__Outputs {
    return new MintTimeLockCall__Outputs(this);
  }
}

export class MintTimeLockCall__Inputs {
  _call: MintTimeLockCall;

  constructor(call: MintTimeLockCall) {
    this._call = call;
  }

  get endTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get quantities(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get fnftConfig(): MintTimeLockCallFnftConfigStruct {
    return changetype<MintTimeLockCallFnftConfigStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class MintTimeLockCall__Outputs {
  _call: MintTimeLockCall;

  constructor(call: MintTimeLockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintTimeLockCallFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class MintValueLockCall extends ethereum.Call {
  get inputs(): MintValueLockCall__Inputs {
    return new MintValueLockCall__Inputs(this);
  }

  get outputs(): MintValueLockCall__Outputs {
    return new MintValueLockCall__Outputs(this);
  }
}

export class MintValueLockCall__Inputs {
  _call: MintValueLockCall;

  constructor(call: MintValueLockCall) {
    this._call = call;
  }

  get primaryAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get compareTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get unlockValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get unlockRisingEdge(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get oracleDispatch(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get quantities(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get fnftConfig(): MintValueLockCallFnftConfigStruct {
    return changetype<MintValueLockCallFnftConfigStruct>(
      this._call.inputValues[7].value.toTuple()
    );
  }
}

export class MintValueLockCall__Outputs {
  _call: MintValueLockCall;

  constructor(call: MintValueLockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintValueLockCallFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class ModifyWhitelistCall extends ethereum.Call {
  get inputs(): ModifyWhitelistCall__Inputs {
    return new ModifyWhitelistCall__Inputs(this);
  }

  get outputs(): ModifyWhitelistCall__Outputs {
    return new ModifyWhitelistCall__Outputs(this);
  }
}

export class ModifyWhitelistCall__Inputs {
  _call: ModifyWhitelistCall;

  constructor(call: ModifyWhitelistCall) {
    this._call = call;
  }

  get contra(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get listed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ModifyWhitelistCall__Outputs {
  _call: ModifyWhitelistCall;

  constructor(call: ModifyWhitelistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAddressRegistryCall extends ethereum.Call {
  get inputs(): SetAddressRegistryCall__Inputs {
    return new SetAddressRegistryCall__Inputs(this);
  }

  get outputs(): SetAddressRegistryCall__Outputs {
    return new SetAddressRegistryCall__Outputs(this);
  }
}

export class SetAddressRegistryCall__Inputs {
  _call: SetAddressRegistryCall;

  constructor(call: SetAddressRegistryCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAddressRegistryCall__Outputs {
  _call: SetAddressRegistryCall;

  constructor(call: SetAddressRegistryCall) {
    this._call = call;
  }
}

export class SetERC20FeeCall extends ethereum.Call {
  get inputs(): SetERC20FeeCall__Inputs {
    return new SetERC20FeeCall__Inputs(this);
  }

  get outputs(): SetERC20FeeCall__Outputs {
    return new SetERC20FeeCall__Outputs(this);
  }
}

export class SetERC20FeeCall__Inputs {
  _call: SetERC20FeeCall;

  constructor(call: SetERC20FeeCall) {
    this._call = call;
  }

  get erc20(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetERC20FeeCall__Outputs {
  _call: SetERC20FeeCall;

  constructor(call: SetERC20FeeCall) {
    this._call = call;
  }
}

export class SetFlatWeiFeeCall extends ethereum.Call {
  get inputs(): SetFlatWeiFeeCall__Inputs {
    return new SetFlatWeiFeeCall__Inputs(this);
  }

  get outputs(): SetFlatWeiFeeCall__Outputs {
    return new SetFlatWeiFeeCall__Outputs(this);
  }
}

export class SetFlatWeiFeeCall__Inputs {
  _call: SetFlatWeiFeeCall;

  constructor(call: SetFlatWeiFeeCall) {
    this._call = call;
  }

  get wethFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFlatWeiFeeCall__Outputs {
  _call: SetFlatWeiFeeCall;

  constructor(call: SetFlatWeiFeeCall) {
    this._call = call;
  }
}

export class SplitFNFTCall extends ethereum.Call {
  get inputs(): SplitFNFTCall__Inputs {
    return new SplitFNFTCall__Inputs(this);
  }

  get outputs(): SplitFNFTCall__Outputs {
    return new SplitFNFTCall__Outputs(this);
  }
}

export class SplitFNFTCall__Inputs {
  _call: SplitFNFTCall;

  constructor(call: SplitFNFTCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proportions(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SplitFNFTCall__Outputs {
  _call: SplitFNFTCall;

  constructor(call: SplitFNFTCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockFNFTCall extends ethereum.Call {
  get inputs(): UnlockFNFTCall__Inputs {
    return new UnlockFNFTCall__Inputs(this);
  }

  get outputs(): UnlockFNFTCall__Outputs {
    return new UnlockFNFTCall__Outputs(this);
  }
}

export class UnlockFNFTCall__Inputs {
  _call: UnlockFNFTCall;

  constructor(call: UnlockFNFTCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockFNFTCall__Outputs {
  _call: UnlockFNFTCall;

  constructor(call: UnlockFNFTCall) {
    this._call = call;
  }
}

export class WithdrawAndRemapCall extends ethereum.Call {
  get inputs(): WithdrawAndRemapCall__Inputs {
    return new WithdrawAndRemapCall__Inputs(this);
  }

  get outputs(): WithdrawAndRemapCall__Outputs {
    return new WithdrawAndRemapCall__Outputs(this);
  }
}

export class WithdrawAndRemapCall__Inputs {
  _call: WithdrawAndRemapCall;

  constructor(call: WithdrawAndRemapCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fnftConfig(): WithdrawAndRemapCallFnftConfigStruct {
    return changetype<WithdrawAndRemapCallFnftConfigStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class WithdrawAndRemapCall__Outputs {
  _call: WithdrawAndRemapCall;

  constructor(call: WithdrawAndRemapCall) {
    this._call = call;
  }
}

export class WithdrawAndRemapCallFnftConfigStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get pipeToContract(): Address {
    return this[1].toAddress();
  }

  get depositAmount(): BigInt {
    return this[2].toBigInt();
  }

  get depositMul(): BigInt {
    return this[3].toBigInt();
  }

  get split(): BigInt {
    return this[4].toBigInt();
  }

  get depositStopTime(): BigInt {
    return this[5].toBigInt();
  }

  get maturityExtension(): boolean {
    return this[6].toBoolean();
  }

  get isMulti(): boolean {
    return this[7].toBoolean();
  }

  get nontransferrable(): boolean {
    return this[8].toBoolean();
  }
}

export class WithdrawFNFTCall extends ethereum.Call {
  get inputs(): WithdrawFNFTCall__Inputs {
    return new WithdrawFNFTCall__Inputs(this);
  }

  get outputs(): WithdrawFNFTCall__Outputs {
    return new WithdrawFNFTCall__Outputs(this);
  }
}

export class WithdrawFNFTCall__Inputs {
  _call: WithdrawFNFTCall;

  constructor(call: WithdrawFNFTCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get args(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class WithdrawFNFTCall__Outputs {
  _call: WithdrawFNFTCall;

  constructor(call: WithdrawFNFTCall) {
    this._call = call;
  }
}

export class WithdrawFNFT1Call extends ethereum.Call {
  get inputs(): WithdrawFNFT1Call__Inputs {
    return new WithdrawFNFT1Call__Inputs(this);
  }

  get outputs(): WithdrawFNFT1Call__Outputs {
    return new WithdrawFNFT1Call__Outputs(this);
  }
}

export class WithdrawFNFT1Call__Inputs {
  _call: WithdrawFNFT1Call;

  constructor(call: WithdrawFNFT1Call) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFNFT1Call__Outputs {
  _call: WithdrawFNFT1Call;

  constructor(call: WithdrawFNFT1Call) {
    this._call = call;
  }
}
